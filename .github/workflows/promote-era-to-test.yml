# ======================================================================================
#  Last Updated: 2025-07-31
#
#  Description:
#  Promotes an image by re-tagging it within the OpenShift ImageStream.
#  This in-cluster promotion guarantees image digest is preserved.
#
# ======================================================================================

name: Promote ERA to Test

# --- TRIGGERS -----------------------------------------------------------------------
on:
  # This workflow is triggered manually, requiring explicit user action.
  workflow_dispatch:
    inputs:
      source_tag:
        description: "The source tag to promote (e.g., latest, or a specific shortsha tag)"
        required: false
        default: "latest"

# --- ENVIRONMENT VARIABLES (Preserving original structure) -------------------------
env:
  IMAGE_REGISTRY: ${{ vars.OCP4_REGISTRY }}
  NAMESPACE: ${{ secrets.OCP4_NAMESPACE }}
  SOURCE_TAG: ${{ github.event.inputs.source_tag }}
  TARGET_TAG: "test"
  BACKUP_TAG: "test-backup"

# --- JOBS ---------------------------------------------------------------------------
jobs:
  promote-images:
    name: Promote ${{ matrix.image_name }} to Test
    environment: promote-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_name: ["ess-backend", "oauth-server", "registrants-portal-api", "registrants-portal-ui", "responders-portal-api", "responders-portal-ui", "suppliers-portal-api", "suppliers-portal-ui"]

    env:
      IMAGE_NAME: ${{ matrix.image_name }}

    steps:
      - name: Install OpenShift CLI
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz"
          tar -xzf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        run: |
          oc login --token="${{ secrets.OCP4_PASSWORD }}" --server="${{ secrets.OPENSHIFT_SERVER }}"


      - name: Get source digest
        id: get_source_digest
        run: |
          SOURCE_DIGEST=$(oc get istag ${{ env.IMAGE_NAME }}:${{ env.SOURCE_TAG }} -n ${{ env.NAMESPACE }} -o jsonpath='{.image.metadata.name}')
          echo "source_digest=$SOURCE_DIGEST" >> $GITHUB_OUTPUT

      - name: Get target digest (for backup)
        id: get_target_digest
        run: |
          TARGET_DIGEST=$(oc get istag ${{ env.IMAGE_NAME }}:${{ env.TARGET_TAG }} -n ${{ env.NAMESPACE }} -o jsonpath='{.image.metadata.name}')
          echo "target_digest=$TARGET_DIGEST" >> $GITHUB_OUTPUT

      - name: Backup Current Target Image (by digest)
        if: steps.get_target_digest.outputs.target_digest != ''
        run: |
          echo "Backing up current '${{ env.TARGET_TAG }}' image to '${{ env.BACKUP_TAG }}' by digest..."
          oc tag ${{ env.IMAGE_NAME }}@${{ steps.get_target_digest.outputs.target_digest }} ${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }} --reference
          echo "Backup successful."
          
      - name: Promote source to target (by digest)
        run: |
          echo "Promoting '${{ env.SOURCE_TAG }}' to '${{ env.TARGET_TAG }}' by digest for image '${{ env.IMAGE_NAME }}'..."
          oc tag ${{ env.IMAGE_NAME }}@${{ steps.get_source_digest.outputs.source_digest }} ${{ env.IMAGE_NAME }}:${{ env.TARGET_TAG }} --reference
          echo "Promotion successful."

      - name: Validate Promotion by Comparing Image Digests
        run: |
          echo "Validating promotion for image '${{ env.IMAGE_NAME }}'..."
          sleep 5

          SOURCE_SHA=$(oc get imagestreamtag ${{ env.IMAGE_NAME }}:${{ env.SOURCE_TAG }} -n ${{ env.NAMESPACE }} -o jsonpath='{.image.dockerImageReference}' | sed 's/.*@//')
          TARGET_SHA=$(oc get imagestreamtag ${{ env.IMAGE_NAME }}:${{ env.TARGET_TAG }} -n ${{ env.NAMESPACE }} -o jsonpath='{.image.dockerImageReference}' | sed 's/.*@//')

          echo "Source Digest: $SOURCE_SHA"
          echo "Target Digest: $TARGET_SHA"

          if [[ -z "$SOURCE_SHA" ]]; then
            echo "::error::Could not find source digest for tag '${{ env.SOURCE_TAG }}' for image '${{ env.IMAGE_NAME }}'."
            exit 1
          fi

          if [[ "$SOURCE_SHA" == "$TARGET_SHA" ]]; then
            echo "Validation successful! Digests match perfectly."
          else
            echo "::error::Image digests do not match after promotion for image '${{ env.IMAGE_NAME }}'."
            exit 1
          fi
